import operator
import math
data = """The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors"""

import math

def divisorGenerator(n):
    large_divisors = []
    for i in range(1, int(math.sqrt(n) + 1)):
        if n % i == 0:
            yield i
            if i*i != n:
                large_divisors.append(n / i)
    for divisor in reversed(large_divisors):
        yield divisor


    


def greater(numero, numero2):
    if numero % numero2 == 0:
        return True



# def factorisation(num_nus):
#     global num
#     factors = []
#     num = num_nus
#     num_original = num
#     factors.append(num)
#     factors.append(1)
#     temp_num = int(num)
#     index = num
    
    
#     while index  > 0:
        
#         if operator.mod(num,index) == 0:
#             if index not in factors:    
#                 factors.append(index)
                
                
            
            
                  
            
#                 #print(index)
#         index -= 1
#     print(len(factors))
#     return(len(factors))
    


def find_sum_of_divisors():
    next = 0
    turn_off = True
    n = 1
    #print(n)
    while turn_off:
        #print(n)
        temp_num = 0
        temp=[]
        index=0
        prime=int(n*(n+1)/2)

        
        print(list(divisorGenerator(n)))
        if len(list(divisorGenerator(prime))) > 500:
            print(list(divisorGenerator(prime)))
            print(prime)
            turn_off = False

            #print(next)
        n += 1
    
find_sum_of_divisors()
